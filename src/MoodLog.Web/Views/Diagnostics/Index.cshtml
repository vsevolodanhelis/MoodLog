@model MoodLog.Web.Controllers.DiagnosticsViewModel
@{
    ViewData["Title"] = "System Diagnostics";
    Layout = "_DashboardLayout";
}

<div class="diagnostics-content centered-content">
    <div class="page-header">
        <h1><i class="fas fa-stethoscope me-2"></i>System Diagnostics</h1>
        <p class="text-muted">Advanced C# features demonstration and system health monitoring</p>
    </div>

    <!-- System Health Overview -->
    <div class="health-overview">
        <div class="health-card @(Model.SystemInfo.IsHealthy ? "healthy" : "unhealthy")">
            <div class="health-icon">
                <i class="fas @(Model.SystemInfo.IsHealthy ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
            </div>
            <div class="health-info">
                <h3>System Status</h3>
                <p class="status-text">@(Model.SystemInfo.IsHealthy ? "All systems operational" : $"{Model.SystemInfo.ValidationIssues.Count} issues detected")</p>
                <small class="text-muted">Last checked: @Model.GeneratedAt.ToString("yyyy-MM-dd HH:mm:ss") UTC</small>
            </div>
            <div class="health-actions">
                <button class="btn btn-outline-primary btn-sm" onclick="validateSystem()">
                    <i class="fas fa-sync-alt me-1"></i>Validate
                </button>
                <button class="btn btn-outline-info btn-sm" onclick="refreshHealth()">
                    <i class="fas fa-refresh me-1"></i>Refresh
                </button>
            </div>
        </div>
    </div>

    <!-- System Information Grid -->
    <div class="diagnostics-grid">
        <!-- Assembly Information -->
        <div class="diagnostic-card">
            <div class="card-header">
                <h4><i class="fas fa-cube me-2"></i>Assembly Information</h4>
                <span class="badge bg-info">Reflection Demo</span>
            </div>
            <div class="card-body">
                <div class="info-row">
                    <span class="label">Name:</span>
                    <span class="value">@Model.SystemInfo.AssemblyName</span>
                </div>
                <div class="info-row">
                    <span class="label">Version:</span>
                    <span class="value">@Model.SystemInfo.AssemblyVersion</span>
                </div>
                <div class="info-row">
                    <span class="label">Title:</span>
                    <span class="value">@Model.SystemInfo.AssemblyTitle</span>
                </div>
                <div class="info-row">
                    <span class="label">Company:</span>
                    <span class="value">@Model.SystemInfo.Company</span>
                </div>
            </div>
        </div>

        <!-- Runtime Information -->
        <div class="diagnostic-card">
            <div class="card-header">
                <h4><i class="fas fa-microchip me-2"></i>Runtime Information</h4>
                <span class="badge bg-success">System Info</span>
            </div>
            <div class="card-body">
                <div class="info-row">
                    <span class="label">Runtime:</span>
                    <span class="value">@Model.SystemInfo.RuntimeVersion</span>
                </div>
                <div class="info-row">
                    <span class="label">OS:</span>
                    <span class="value">@Model.SystemInfo.OperatingSystem</span>
                </div>
                <div class="info-row">
                    <span class="label">Machine:</span>
                    <span class="value">@Model.SystemInfo.MachineName</span>
                </div>
                <div class="info-row">
                    <span class="label">Processors:</span>
                    <span class="value">@Model.SystemInfo.ProcessorCount</span>
                </div>
            </div>
        </div>

        <!-- Memory Information -->
        <div class="diagnostic-card">
            <div class="card-header">
                <h4><i class="fas fa-memory me-2"></i>Memory Usage</h4>
                <span class="badge bg-warning">Performance</span>
            </div>
            <div class="card-body">
                <div class="info-row">
                    <span class="label">Working Set:</span>
                    <span class="value">@((Model.SystemInfo.WorkingSet / 1024.0 / 1024.0).ToString("F2")) MB</span>
                </div>
                <div class="info-row">
                    <span class="label">GC Memory:</span>
                    <span class="value">@((Model.SystemInfo.GCMemory / 1024.0 / 1024.0).ToString("F2")) MB</span>
                </div>
                <div class="memory-bar">
                    <div class="memory-usage" style="width: @(Math.Min((Model.SystemInfo.WorkingSet / 1024.0 / 1024.0 / 500.0) * 100, 100))%"></div>
                </div>
                <small class="text-muted">Memory usage visualization</small>
            </div>
        </div>

        <!-- Registered Services -->
        <div class="diagnostic-card full-width">
            <div class="card-header">
                <h4><i class="fas fa-cogs me-2"></i>Registered Services</h4>
                <span class="badge bg-primary">DI Container</span>
            </div>
            <div class="card-body">
                <div class="services-grid">
                    @foreach (var service in Model.Services.Take(6))
                    {
                        <div class="service-item">
                            <div class="service-icon">
                                <i class="fas @(service.IsInterface ? "fa-plug" : "fa-cube")"></i>
                            </div>
                            <div class="service-info">
                                <h6>@service.Name</h6>
                                <small class="text-muted">@service.Assembly</small>
                                <div class="service-stats">
                                    <span class="badge badge-sm bg-secondary">@service.MethodCount methods</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                @if (Model.Services.Count > 6)
                {
                    <div class="text-center mt-3">
                        <button class="btn btn-outline-primary btn-sm" onclick="loadAllServices()">
                            <i class="fas fa-list me-1"></i>View All @Model.Services.Count Services
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Wellness Quote Section -->
    <div class="wellness-quote-section">
        <div class="quote-card">
            <div class="quote-header">
                <h4><i class="fas fa-quote-left me-2"></i>Daily Wellness Quote</h4>
                <span class="badge bg-info">HttpClient Demo</span>
            </div>
            <div class="quote-content" id="quoteContent">
                <div class="loading-quote">
                    <i class="fas fa-spinner fa-spin me-2"></i>Loading inspirational quote...
                </div>
            </div>
            <div class="quote-actions">
                <button class="btn btn-outline-primary btn-sm" onclick="loadQuote('daily')">
                    <i class="fas fa-sun me-1"></i>Daily Quote
                </button>
                <button class="btn btn-outline-success btn-sm" onclick="loadQuote('motivational')">
                    <i class="fas fa-rocket me-1"></i>Motivational
                </button>
            </div>
        </div>
    </div>

    <!-- Validation Issues -->
    @if (Model.SystemInfo.ValidationIssues.Any())
    {
        <div class="validation-issues">
            <div class="alert alert-warning">
                <h5><i class="fas fa-exclamation-triangle me-2"></i>Validation Issues</h5>
                <ul class="mb-0">
                    @foreach (var issue in Model.SystemInfo.ValidationIssues)
                    {
                        <li>@issue</li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

<style>
    .diagnostics-content {
        padding: 2rem 0;
    }

    .page-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .page-header h1 {
        color: var(--text-primary);
        font-weight: var(--font-weight-bold);
        margin-bottom: 0.5rem;
    }

    .health-overview {
        margin-bottom: 2rem;
    }

    .health-card {
        background: var(--glass-bg);
        border: 2px solid var(--glass-border);
        border-radius: var(--border-radius-lg);
        padding: 2rem;
        display: flex;
        align-items: center;
        gap: 2rem;
        box-shadow: var(--shadow-md);
    }

    .health-card.healthy {
        border-color: #22c55e;
        background: rgba(34, 197, 94, 0.05);
    }

    .health-card.unhealthy {
        border-color: #ef4444;
        background: rgba(239, 68, 68, 0.05);
    }

    .health-icon {
        font-size: 3rem;
        color: var(--accent-primary);
    }

    .health-card.healthy .health-icon {
        color: #22c55e;
    }

    .health-card.unhealthy .health-icon {
        color: #ef4444;
    }

    .health-info {
        flex: 1;
    }

    .health-info h3 {
        margin: 0 0 0.5rem 0;
        color: var(--text-primary);
    }

    .status-text {
        margin: 0 0 0.25rem 0;
        font-weight: var(--font-weight-medium);
    }

    .diagnostics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .diagnostic-card {
        background: var(--glass-bg);
        border: 2px solid var(--glass-border);
        border-radius: var(--border-radius-lg);
        overflow: hidden;
        box-shadow: var(--shadow-md);
    }

    .diagnostic-card.full-width {
        grid-column: 1 / -1;
    }

    .card-header {
        background: var(--bg-secondary);
        padding: 1rem 1.5rem;
        border-bottom: 2px solid var(--glass-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-header h4 {
        margin: 0;
        color: var(--text-primary);
        font-weight: var(--font-weight-semibold);
    }

    .card-body {
        padding: 1.5rem;
    }

    .info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--bg-tertiary);
    }

    .info-row:last-child {
        border-bottom: none;
    }

    .info-row .label {
        font-weight: var(--font-weight-medium);
        color: var(--text-secondary);
    }

    .info-row .value {
        color: var(--text-primary);
        font-family: 'Courier New', monospace;
    }

    .memory-bar {
        width: 100%;
        height: 8px;
        background: var(--bg-tertiary);
        border-radius: 4px;
        overflow: hidden;
        margin: 1rem 0 0.5rem 0;
    }

    .memory-usage {
        height: 100%;
        background: linear-gradient(90deg, #22c55e, #f59e0b, #ef4444);
        transition: width 0.3s ease;
    }

    .services-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .service-item {
        background: var(--bg-secondary);
        border: 1px solid var(--bg-tertiary);
        border-radius: var(--border-radius-md);
        padding: 1rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .service-icon {
        width: 40px;
        height: 40px;
        background: var(--accent-primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }

    .service-info h6 {
        margin: 0 0 0.25rem 0;
        color: var(--text-primary);
        font-size: 0.9rem;
    }

    .wellness-quote-section {
        margin-bottom: 2rem;
    }

    .quote-card {
        background: var(--glass-bg);
        border: 2px solid var(--glass-border);
        border-radius: var(--border-radius-lg);
        overflow: hidden;
        box-shadow: var(--shadow-md);
    }

    .quote-header {
        background: var(--bg-secondary);
        padding: 1rem 1.5rem;
        border-bottom: 2px solid var(--glass-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .quote-content {
        padding: 2rem;
        text-align: center;
        min-height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quote-actions {
        padding: 1rem 1.5rem;
        border-top: 2px solid var(--glass-border);
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .validation-issues {
        margin-top: 2rem;
    }

    @@media (max-width: 768px) {
        .diagnostics-grid {
            grid-template-columns: 1fr;
        }
        
        .health-card {
            flex-direction: column;
            text-align: center;
            gap: 1rem;
        }
        
        .services-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@section Scripts {
    <script>
        // Load initial quote
        document.addEventListener('DOMContentLoaded', function() {
            loadQuote('daily');
        });

        async function loadQuote(category) {
            const quoteContent = document.getElementById('quoteContent');
            quoteContent.innerHTML = '<div class="loading-quote"><i class="fas fa-spinner fa-spin me-2"></i>Loading quote...</div>';

            try {
                const response = await fetch(`/Admin/Diagnostics/quote?category=${category}`);
                const data = await response.json();

                if (data.success && data.quote) {
                    quoteContent.innerHTML = `
                        <blockquote class="quote-text">
                            <p>"${data.quote.text}"</p>
                            <footer class="quote-author">— ${data.quote.author}</footer>
                            <small class="text-muted">${data.quote.category}</small>
                        </blockquote>
                    `;
                } else {
                    quoteContent.innerHTML = '<div class="text-muted">No quote available at this time.</div>';
                }
            } catch (error) {
                console.error('Error loading quote:', error);
                quoteContent.innerHTML = '<div class="text-danger">Failed to load quote. Please try again.</div>';
            }
        }

        async function validateSystem() {
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Validating...';
            button.disabled = true;

            try {
                const response = await fetch('/Admin/Diagnostics/validate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                });

                if (response.ok) {
                    location.reload();
                } else {
                    throw new Error('Validation request failed');
                }
            } catch (error) {
                console.error('Error validating system:', error);
                showMessage('System validation failed. Please try again.', '#ef4444');
            } finally {
                button.innerHTML = originalText;
                button.disabled = false;
            }
        }

        async function refreshHealth() {
            location.reload();
        }

        async function loadAllServices() {
            try {
                const response = await fetch('/Admin/Diagnostics/services');
                const data = await response.json();

                if (data.success) {
                    // Display all services in a modal or expanded view
                    console.log('All services:', data.services);
                    showMessage(`Found ${data.services.length} registered services. Check console for details.`, '#667eea');
                }
            } catch (error) {
                console.error('Error loading services:', error);
                showMessage('Failed to load services. Please try again.', '#ef4444');
            }
        }
    </script>
}
