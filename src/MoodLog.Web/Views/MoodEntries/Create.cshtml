@{
    ViewData["Title"] = "Log Your Mood";
    Layout = "_DashboardLayout";
}

<div class="mood-entry-container centered-content">
    <div class="mood-entry-card">
        <div class="entry-header">
            <h2>Create New Mood Entry</h2>
            <p class="entry-subtitle">Log your mood for any date</p>
        </div>

        <form id="moodEntryForm" class="mood-form">
            @Html.AntiForgeryToken()

            <!-- Date Selection -->
            <div class="date-section">
                <h3>Select Date</h3>
                <div class="date-input-container">
                    <input type="date" id="entryDate" name="entryDate" class="form-control date-input"
                           value="@DateTime.Today.ToString("yyyy-MM-dd")"
                           max="@DateTime.Today.ToString("yyyy-MM-dd")"
                           required>
                    <small class="form-text text-muted">You can create entries for today or any past date</small>
                </div>
            </div>

            <!-- Mood Selection -->
            <div class="mood-section">
                <h3>Select your mood</h3>
                <div class="mood-selector">
                    <div class="mood-option" data-mood="1" data-label="Very Bad">
                        <div class="mood-emoji">üò¢</div>
                        <span class="mood-label">Very Bad</span>
                    </div>
                    <div class="mood-option" data-mood="2" data-label="Bad">
                        <div class="mood-emoji">üòî</div>
                        <span class="mood-label">Bad</span>
                    </div>
                    <div class="mood-option" data-mood="3" data-label="Okay">
                        <div class="mood-emoji">üòê</div>
                        <span class="mood-label">Okay</span>
                    </div>
                    <div class="mood-option" data-mood="4" data-label="Good">
                        <div class="mood-emoji">üòä</div>
                        <span class="mood-label">Good</span>
                    </div>
                    <div class="mood-option" data-mood="5" data-label="Great">
                        <div class="mood-emoji">üòÑ</div>
                        <span class="mood-label">Great</span>
                    </div>
                </div>
            </div>

            <!-- Intensity Slider -->
            <div class="intensity-section" id="intensitySection" style="display: none;">
                <h3>How intense is this feeling?</h3>
                <div class="intensity-slider-container">
                    <div class="intensity-labels">
                        <span>Mild</span>
                        <span>Moderate</span>
                        <span>Strong</span>
                        <span>Very Strong</span>
                        <span>Extreme</span>
                    </div>
                    <input type="range" id="intensitySlider" class="intensity-slider" min="1" max="5" value="3">
                    <div class="intensity-value">
                        <span id="intensityDisplay">3</span>/5
                    </div>
                </div>
            </div>

            <!-- Tags Section -->
            <div class="tags-section" id="tagsSection" style="display: none;">
                <h3>What's affecting your mood? (Optional)</h3>
                <div class="tag-input-container">
                    <input type="text" id="tagInput" class="tag-input" placeholder="Type a tag and press Enter...">
                    <div class="tag-suggestions" id="tagSuggestions"></div>
                </div>
                <div class="selected-tags" id="selectedTags"></div>
                <div class="common-tags">
                    <span class="common-tag-label">Common tags:</span>
                    <button type="button" class="tag-suggestion" data-tag="work">work</button>
                    <button type="button" class="tag-suggestion" data-tag="family">family</button>
                    <button type="button" class="tag-suggestion" data-tag="exercise">exercise</button>
                    <button type="button" class="tag-suggestion" data-tag="stress">stress</button>
                    <button type="button" class="tag-suggestion" data-tag="sleep">sleep</button>
                    <button type="button" class="tag-suggestion" data-tag="weather">weather</button>
                    <button type="button" class="tag-suggestion" data-tag="social">social</button>
                    <button type="button" class="tag-suggestion" data-tag="health">health</button>
                </div>
            </div>

            <!-- Notes Section -->
            <div class="notes-section" id="notesSection" style="display: none;">
                <h3>Tell us more (Optional)</h3>
                <textarea id="moodNotes" class="mood-notes" rows="4" placeholder="What happened today? How are you feeling? Any thoughts you'd like to record..."></textarea>
                <div class="notes-counter">
                    <span id="notesCount">0</span>/500 characters
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="form-actions" id="formActions" style="display: none;">
                <button type="button" class="btn btn-secondary" onclick="goBack()">
                    <i class="fas fa-arrow-left me-2"></i>Back
                </button>
                <button type="submit" class="btn btn-primary btn-save" disabled>
                    <i class="fas fa-save me-2"></i>Save Mood Entry
                </button>
                <button type="button" class="btn btn-warning btn-test" onclick="testFormSubmission()">
                    <i class="fas fa-bug me-2"></i>Test Form
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content success-modal">
            <div class="modal-body text-center">
                <div class="success-animation">
                    <div class="confetti"></div>
                    <div class="success-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                </div>
                <h3>Mood Logged Successfully!</h3>
                <p>Your mood has been recorded. Keep up the great work tracking your emotional wellness!</p>
                <div class="modal-actions">
                    <button type="button" class="btn btn-primary" onclick="goToDashboard()">
                        <i class="fas fa-home me-2"></i>Go to Dashboard
                    </button>
                    <button type="button" class="btn btn-outline-primary" onclick="logAnother()">
                        <i class="fas fa-plus me-2"></i>Log Another
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let selectedMood = 0;
        let selectedIntensity = 3;
        let selectedTags = [];
        let currentStep = 0;

        const steps = ['mood', 'intensity', 'tags', 'notes'];

        // Mood selection
        document.querySelectorAll('.mood-option').forEach(option => {
            option.addEventListener('click', function() {
                selectedMood = parseInt(this.dataset.mood);

                // Update UI
                document.querySelectorAll('.mood-option').forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');

                // Show next step
                setTimeout(() => {
                    showStep('intensity');
                }, 500);
            });
        });

        // Intensity slider
        const intensitySlider = document.getElementById('intensitySlider');
        const intensityDisplay = document.getElementById('intensityDisplay');

        intensitySlider.addEventListener('input', function() {
            selectedIntensity = parseInt(this.value);
            intensityDisplay.textContent = this.value;
            updateSliderColor();
        });

        function updateSliderColor() {
            const percentage = ((selectedIntensity - 1) / 4) * 100;
            intensitySlider.style.background = `linear-gradient(to right, #667eea 0%, #667eea ${percentage}%, #e2e8f0 ${percentage}%, #e2e8f0 100%)`;
        }

        // Tag system
        const tagInput = document.getElementById('tagInput');
        const selectedTagsContainer = document.getElementById('selectedTags');

        tagInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && this.value.trim()) {
                addTag(this.value.trim());
                this.value = '';
            }
        });

        document.querySelectorAll('.tag-suggestion').forEach(btn => {
            btn.addEventListener('click', function() {
                addTag(this.dataset.tag);
            });
        });

        function addTag(tagName) {
            if (!selectedTags.includes(tagName) && selectedTags.length < 10) {
                selectedTags.push(tagName);
                renderTags();
            }
        }

        function removeTag(tagName) {
            selectedTags = selectedTags.filter(tag => tag !== tagName);
            renderTags();
        }

        function renderTags() {
            selectedTagsContainer.innerHTML = selectedTags.map(tag =>
                `<span class="selected-tag">
                    ${tag}
                    <button type="button" class="remove-tag" onclick="removeTag('${tag}')">
                        <i class="fas fa-times"></i>
                    </button>
                </span>`
            ).join('');
        }

        // Notes counter
        const notesTextarea = document.getElementById('moodNotes');
        const notesCounter = document.getElementById('notesCount');

        notesTextarea.addEventListener('input', function() {
            const count = this.value.length;
            notesCounter.textContent = count;

            if (count > 500) {
                this.value = this.value.substring(0, 500);
                notesCounter.textContent = 500;
            }
        });

        // Step navigation
        function showStep(stepName) {
            const stepIndex = steps.indexOf(stepName);
            if (stepIndex === -1) return;

            currentStep = stepIndex;

            // Hide all sections
            document.querySelectorAll('.intensity-section, .tags-section, .notes-section, .form-actions').forEach(el => {
                el.style.display = 'none';
            });

            // Show current and subsequent sections
            for (let i = stepIndex; i < steps.length; i++) {
                const section = document.getElementById(steps[i] + 'Section');
                if (section) {
                    section.style.display = 'block';
                }
            }

            // Show form actions
            document.getElementById('formActions').style.display = 'flex';

            // Enable save button if mood is selected
            const saveBtn = document.querySelector('.btn-save');
            saveBtn.disabled = selectedMood === 0;

            // Update slider color
            if (stepName === 'intensity') {
                updateSliderColor();
            }
        }

        function goBack() {
            if (currentStep > 0) {
                showStep(steps[currentStep - 1]);
            } else {
                window.location.href = '@Url.Action("Index", "Dashboard")';
            }
        }

        // Form submission
        document.getElementById('moodEntryForm').addEventListener('submit', function(e) {
            e.preventDefault();

            console.log('=== MAIN FORM SUBMISSION STARTED ===');
            console.log('Selected mood:', selectedMood);

            if (selectedMood === 0) {
                console.error('No mood selected');
                showMessage('Please select a mood first', '#ef4444', 3000);
                return;
            }

            const entryDate = document.getElementById('entryDate').value;
            if (!entryDate) {
                showMessage('Please select a date', '#ef4444', 3000);
                return;
            }

            // Disable submit button
            const submitBtn = document.querySelector('.btn-save');
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
            }

            const formData = new FormData();
            formData.append('MoodLevel', selectedMood);
            formData.append('Notes', notesTextarea.value || '');

            // Include tags in symptoms field
            let symptomsText = `Intensity: ${selectedIntensity}/5`;
            if (selectedTags.length > 0) {
                symptomsText += `, Tags: ${selectedTags.join(', ')}`;
            }
            formData.append('Symptoms', symptomsText);
            formData.append('EntryDate', entryDate);

            // Don't send SelectedTagIds at all - let it default to empty list
            // formData.append('SelectedTagIds', ''); // This causes validation errors

            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            console.log('Form data being sent:');
            console.log('- MoodLevel:', selectedMood);
            console.log('- Notes:', notesTextarea.value || '');
            console.log('- EntryDate:', entryDate);
            console.log('- SelectedTags:', selectedTags);
            console.log('- Intensity:', selectedIntensity);

            fetch('@Url.Action("Create", "MoodEntries")', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);

                if (response.redirected) {
                    // Success - redirected to dashboard
                    console.log('Success! Redirected to:', response.url);
                    showSuccessModal();
                    return;
                }

                if (response.ok) {
                    return response.text(); // Get HTML response for validation errors
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
            })
            .then(html => {
                if (!html) return; // Already handled redirect case

                console.log('Received HTML response, checking for errors...');

                // Check if response contains validation errors
                if (html.includes('field-validation-error') || html.includes('validation-summary-errors') || html.includes('alert-danger')) {
                    // Extract error message
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Try different selectors for error messages
                    const errorSelectors = [
                        '.field-validation-error',
                        '.validation-summary-errors li',
                        '.alert-danger',
                        '.text-danger'
                    ];

                    let errorMessage = 'Failed to save mood entry';
                    for (const selector of errorSelectors) {
                        const errorElement = doc.querySelector(selector);
                        if (errorElement && errorElement.textContent.trim()) {
                            errorMessage = errorElement.textContent.trim();
                            break;
                        }
                    }

                    console.error('Validation error found:', errorMessage);
                    showMessage(errorMessage, '#ef4444', 5000);

                    // Re-enable submit button
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save Mood Entry';
                    }
                } else {
                    // No errors found, assume success
                    console.log('No validation errors found, assuming success');
                    showSuccessModal();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Failed to save mood entry. Please try again.', '#ef4444', 3000);

                // Re-enable submit button
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save Mood Entry';
                }
            });
        });

        function showSuccessModal() {
            const modal = new bootstrap.Modal(document.getElementById('successModal'));
            modal.show();

            // Trigger confetti animation
            setTimeout(() => {
                document.querySelector('.confetti').classList.add('active');
            }, 200);
        }

        function goToDashboard() {
            window.location.href = '@Url.Action("Index", "Dashboard")';
        }

        function logAnother() {
            window.location.reload();
        }

        function testFormSubmission() {
            console.log('=== TESTING FORM SUBMISSION ===');

            const formData = new FormData();
            formData.append('moodLevel', '5');
            formData.append('notes', 'Test notes');
            formData.append('entryDate', '2024-06-14');
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            console.log('Sending test data to TestCreate endpoint...');

            fetch('@Url.Action("TestCreate", "MoodEntries")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Test response:', data);
                showMessage('Test successful! Check console for details.', '#10b981', 3000);
            })
            .catch(error => {
                console.error('Test error:', error);
                showMessage('Test failed! Check console for details.', '#ef4444', 3000);
            });
        }

        function removeTag(tag) {
            selectedTags = selectedTags.filter(t => t !== tag);
            renderTags();
        }

        function showMessage(text, backgroundColor = '#667eea', duration = 2000) {
            // Remove any existing messages
            const existingMessages = document.querySelectorAll('.create-message');
            existingMessages.forEach(msg => msg.remove());

            const message = document.createElement('div');
            message.className = 'create-message';
            message.textContent = text;
            message.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${backgroundColor};
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                z-index: 1000;
                font-size: 14px;
                font-weight: 500;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                animation: slideInRight 0.3s ease;
                max-width: 300px;
                line-height: 1.4;
            `;

            document.body.appendChild(message);

            setTimeout(() => {
                message.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => {
                    if (document.body.contains(message)) {
                        document.body.removeChild(message);
                    }
                }, 300);
            }, duration);
        }

        // Auto-save functionality
        let autoSaveTimer;
        let hasUnsavedChanges = false;

        function autoSave() {
            if (!hasUnsavedChanges) return;

            const formData = {
                moodLevel: selectedMood,
                notes: document.getElementById('moodNotes').value,
                tags: selectedTags,
                timestamp: new Date().toISOString()
            };

            localStorage.setItem('moodlog-autosave', JSON.stringify(formData));
            showMessage('Draft saved automatically', '#10b981', 1500);
            hasUnsavedChanges = false;
        }

        function markAsChanged() {
            hasUnsavedChanges = true;
            clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(autoSave, 3000); // Auto-save after 3 seconds of inactivity
        }

        function loadAutoSave() {
            const saved = localStorage.getItem('moodlog-autosave');
            if (saved) {
                try {
                    const data = JSON.parse(saved);
                    const savedTime = new Date(data.timestamp);
                    const now = new Date();
                    const hoursDiff = (now - savedTime) / (1000 * 60 * 60);

                    if (hoursDiff < 24) { // Only restore if less than 24 hours old
                        if (confirm('Found a saved draft from ' + savedTime.toLocaleString() + '. Would you like to restore it?')) {
                            selectedMood = data.moodLevel;
                            document.getElementById('moodNotes').value = data.notes || '';
                            selectedTags = data.tags || [];

                            // Update UI
                            updateSliderColor();
                            renderTags();
                            document.querySelectorAll('.mood-option').forEach(opt => {
                                opt.classList.toggle('selected', parseInt(opt.dataset.mood) === selectedMood);
                            });
                        }
                    }
                } catch (e) {
                    console.error('Error loading auto-save:', e);
                }
            }
        }

        function clearAutoSave() {
            localStorage.removeItem('moodlog-autosave');
        }

        // Add event listeners for auto-save
        const moodNotesEl = document.getElementById('moodNotes');
        const entryDateEl = document.getElementById('entryDate');

        if (moodNotesEl) {
            moodNotesEl.addEventListener('input', markAsChanged);
        }
        if (entryDateEl) {
            entryDateEl.addEventListener('change', markAsChanged);
        }
        document.querySelectorAll('.mood-option').forEach(opt => {
            opt.addEventListener('click', markAsChanged);
        });

        // Enhanced keyboard shortcuts for Create form
        document.addEventListener('keydown', function(e) {
            // Ctrl+S for save
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                const saveBtn = document.querySelector('.btn-save');
                if (saveBtn && !saveBtn.disabled) {
                    saveBtn.click();
                }
                return;
            }

            // Enter to submit form (when not in textarea)
            if (e.key === 'Enter' && e.target.tagName !== 'TEXTAREA') {
                const form = document.querySelector('form');
                const saveBtn = document.querySelector('.btn-save');

                if (form && saveBtn && !saveBtn.disabled) {
                    // Check if required fields are filled
                    const moodLevel = document.querySelector('input[name="MoodLevel"]:checked');
                    if (moodLevel) {
                        e.preventDefault();
                        saveBtn.click();
                    }
                }
                return;
            }

            // Escape to cancel/go back
            if (e.key === 'Escape') {
                e.preventDefault();
                const cancelBtn = document.querySelector('.btn-secondary');
                if (cancelBtn) {
                    cancelBtn.click();
                } else {
                    // Fallback: go back to dashboard
                    window.location.href = '@Url.Action("Index", "Dashboard")';
                }
                return;
            }

            // Number keys for quick mood selection (1-10)
            if (e.key >= '1' && e.key <= '9' && !['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName)) {
                const moodLevel = parseInt(e.key);
                const moodRadio = document.querySelector(`input[name="MoodLevel"][value="${moodLevel}"]`);
                if (moodRadio) {
                    e.preventDefault();
                    moodRadio.checked = true;
                    moodRadio.dispatchEvent(new Event('change'));

                    // Visual feedback
                    const label = moodRadio.closest('label') || document.querySelector(`label[for="${moodRadio.id}"]`);
                    if (label) {
                        label.style.transform = 'scale(1.1)';
                        setTimeout(() => {
                            label.style.transform = '';
                        }, 200);
                    }
                }
                return;
            }

            // 0 key for mood level 10
            if (e.key === '0' && !['INPUT', 'TEXTAREA', 'SELECT'].includes(e.target.tagName)) {
                const moodRadio = document.querySelector('input[name="MoodLevel"][value="10"]');
                if (moodRadio) {
                    e.preventDefault();
                    moodRadio.checked = true;
                    moodRadio.dispatchEvent(new Event('change'));

                    // Visual feedback
                    const label = moodRadio.closest('label') || document.querySelector(`label[for="${moodRadio.id}"]`);
                    if (label) {
                        label.style.transform = 'scale(1.1)';
                        setTimeout(() => {
                            label.style.transform = '';
                        }, 200);
                    }
                }
                return;
            }
        });

        // Clear auto-save on successful submission
        const moodForm = document.getElementById('moodEntryForm');
        if (moodForm) {
            moodForm.addEventListener('submit', function(e) {
                clearAutoSave();
            });
        }

        // Initialize
        updateSliderColor();
        loadAutoSave();

        // Add CSS animations for notifications
        const style = document.createElement('style');
        style.textContent = `
            @@keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }

            @@keyframes slideOutRight {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }

            .date-section {
                margin-bottom: 2rem;
                padding: 1.5rem;
                background: #f8fafc;
                border-radius: 12px;
                border: 1px solid #e2e8f0;
            }

            .date-section h3 {
                margin-bottom: 1rem;
                color: #1e293b;
                font-size: 1.1rem;
                font-weight: 600;
            }

            .date-input-container {
                display: flex;
                flex-direction: column;
                gap: 0.5rem;
            }

            .date-input {
                padding: 0.75rem 1rem;
                border: 2px solid #e2e8f0;
                border-radius: 8px;
                font-size: 1rem;
                transition: all 0.2s ease;
                background: white;
            }

            .date-input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

            .entry-subtitle {
                color: #64748b;
                font-size: 0.95rem;
                margin-top: 0.5rem;
            }
        `;
        document.head.appendChild(style);
    </script>
}
