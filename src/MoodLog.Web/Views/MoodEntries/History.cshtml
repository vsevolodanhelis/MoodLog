@model List<MoodLog.Core.DTOs.MoodEntryDto>
@{
    ViewData["Title"] = "Mood History";
    Layout = "_DashboardLayout";
}

<div class="history-content centered-content">
    <!-- Header with View Toggle -->
    <div class="history-header">
        <h2>Mood History</h2>
        <div class="view-controls">
            <div class="view-toggle">
                <button class="view-btn active" data-view="calendar">
                    <i class="fas fa-calendar-alt"></i>
                    Calendar
                </button>
                <button class="view-btn" data-view="list">
                    <i class="fas fa-list"></i>
                    List
                </button>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="filters-section">
        <div class="filter-group">
            <label for="dateRange" class="filter-label">Date Range:</label>
            <select id="dateRange" class="filter-select">
                <option value="7">Last 7 days</option>
                <option value="30" selected>Last 30 days</option>
                <option value="90">Last 3 months</option>
                <option value="365">Last year</option>
                <option value="all">All time</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label for="moodFilter" class="filter-label">Mood:</label>
            <select id="moodFilter" class="filter-select">
                <option value="">All moods</option>
                <option value="1">üò¢ Very Bad</option>
                <option value="2">üòî Bad</option>
                <option value="3">üòê Okay</option>
                <option value="4">üòä Good</option>
                <option value="5">üòÑ Great</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label for="searchNotes" class="filter-label">Search:</label>
            <input type="text" id="searchNotes" class="filter-input" placeholder="Search notes...">
        </div>
        
        <button class="filter-clear" onclick="clearFilters()">
            <i class="fas fa-times"></i>
            Clear
        </button>
    </div>

    <!-- Calendar View -->
    <div class="calendar-view" id="calendarView">
        <div class="calendar-header">
            <button class="nav-btn" onclick="changeMonth(-1)">
                <i class="fas fa-chevron-left"></i>
            </button>
            <h3 id="currentMonth">December 2024</h3>
            <button class="nav-btn" onclick="changeMonth(1)">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
        
        <div class="calendar-grid">
            <div class="calendar-header-row">
                <div class="day-header">Sun</div>
                <div class="day-header">Mon</div>
                <div class="day-header">Tue</div>
                <div class="day-header">Wed</div>
                <div class="day-header">Thu</div>
                <div class="day-header">Fri</div>
                <div class="day-header">Sat</div>
            </div>
            <div class="calendar-days" id="calendarDays">
                <!-- Calendar days will be generated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- List View -->
    <div class="list-view" id="listView" style="display: none;">
        <div class="entries-list" id="entriesList">
            @if (Model.Any())
            {
                @foreach (var entry in Model.OrderByDescending(e => e.EntryDate))
                {
                    <div class="entry-item" data-mood="@entry.MoodLevel" data-date="@entry.EntryDate.ToString("yyyy-MM-dd")" data-notes="@entry.Notes.ToLower()">
                        <div class="entry-date">
                            <div class="date-day">@entry.EntryDate.ToString("dd")</div>
                            <div class="date-info">
                                <div class="date-month">@entry.EntryDate.ToString("MMM")</div>
                                <div class="date-year">@entry.EntryDate.ToString("yyyy")</div>
                            </div>
                        </div>
                        
                        <div class="entry-content">
                            <div class="entry-mood">
                                <span class="mood-emoji">@GetMoodEmoji(entry.MoodLevel)</span>
                                <span class="mood-text">@GetMoodText(entry.MoodLevel)</span>
                                <span class="mood-level">@entry.MoodLevel/10</span>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(entry.Notes))
                            {
                                <div class="entry-notes">@entry.Notes</div>
                            }
                            
                            @if (entry.TagNames.Any())
                            {
                                <div class="entry-tags">
                                    @foreach (var tag in entry.TagNames)
                                    {
                                        <span class="tag">@tag</span>
                                    }
                                </div>
                            }
                            
                            <div class="entry-meta">
                                <span class="entry-time">@entry.EntryDate.ToString("dddd, MMMM dd, yyyy")</span>
                            </div>
                        </div>
                        
                        <div class="entry-actions">
                            <button class="action-btn" onclick="viewEntry(@entry.Id)" title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            <a href="@Url.Action("Edit", "MoodEntries", new { id = entry.Id })" class="action-btn" title="Edit">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="action-btn delete-btn" onclick="deleteEntry(@entry.Id)" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-icon">üìù</div>
                    <h3>No mood entries found</h3>
                    <p>Start tracking your mood to see your history here.</p>
                    <a href="@Url.Action("Create", "MoodEntries")" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Add Your First Entry
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Entry Detail Modal -->
<div class="modal fade" id="entryModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Mood Entry Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="entryModalBody">
                <!-- Entry details will be loaded here -->
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetMoodEmoji(int moodLevel)
    {
        // Updated to support 10-point scale with consistent emoji mapping
        return moodLevel switch
        {
            1 => "üò≠",  // Terrible
            2 => "üò¢",  // Very Bad
            3 => "üòî",  // Bad
            4 => "üòï",  // Poor
            5 => "üòê",  // Okay
            6 => "üôÇ",  // Fine
            7 => "üòä",  // Good
            8 => "üòÑ",  // Great
            9 => "üòÅ",  // Excellent
            10 => "ü§©", // Amazing
            _ => "üòê"   // Default
        };
    }

    private string GetMoodText(int moodLevel)
    {
        // Updated to support 10-point scale
        return moodLevel switch
        {
            1 => "Terrible",
            2 => "Very Bad",
            3 => "Bad",
            4 => "Poor",
            5 => "Okay",
            6 => "Fine",
            7 => "Good",
            8 => "Great",
            9 => "Excellent",
            10 => "Amazing",
            _ => "Unknown"
        };
    }
}

<style>
/* History Page Styles */
.centered-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.history-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid var(--glass-border);
}

.history-header h2 {
    color: var(--text-primary);
    font-weight: var(--font-weight-semibold);
    margin: 0;
}

.view-toggle {
    display: flex;
    background: var(--glass-bg);
    border-radius: var(--border-radius-md);
    border: 2px solid var(--glass-border);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
}

.view-btn {
    background: transparent;
    border: none;
    padding: 0.75rem 1.5rem;
    color: var(--text-secondary);
    font-weight: var(--font-weight-medium);
    transition: all var(--transition-normal);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
}

.view-btn:hover {
    background: var(--bg-hover);
    color: var(--text-primary);
}

.view-btn.active {
    background: var(--accent-primary);
    color: var(--text-on-primary);
}

.filters-section {
    display: flex;
    gap: 1.5rem;
    align-items: end;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: var(--glass-bg);
    border-radius: var(--border-radius-lg);
    border: 2px solid var(--glass-border);
    box-shadow: var(--shadow-md);
    flex-wrap: wrap;
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.filter-label {
    color: var(--text-secondary);
    font-weight: var(--font-weight-medium);
    font-size: 0.9rem;
}

.filter-select,
.filter-input {
    background: var(--bg-secondary);
    border: 2px solid var(--bg-tertiary);
    border-radius: var(--border-radius-md);
    padding: 0.75rem 1rem;
    color: var(--text-primary);
    font-size: 0.9rem;
    transition: all var(--transition-normal);
    min-width: 150px;
    box-shadow: var(--shadow-sm);
}

.filter-select:focus,
.filter-input:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 3px rgba(123, 97, 255, 0.15), var(--shadow-md);
}

.filter-clear {
    background: var(--bg-secondary);
    border: 2px solid var(--bg-tertiary);
    color: var(--text-secondary);
    padding: 0.75rem 1rem;
    border-radius: var(--border-radius-md);
    font-weight: var(--font-weight-medium);
    transition: all var(--transition-normal);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: var(--shadow-sm);
}

.filter-clear:hover {
    background: var(--bg-hover);
    color: var(--text-primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

/* Calendar View */
.calendar-view {
    background: var(--glass-bg);
    border-radius: var(--border-radius-lg);
    border: 2px solid var(--glass-border);
    padding: 2rem;
    box-shadow: var(--shadow-md);
}

.calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.calendar-header h3 {
    color: var(--text-primary);
    font-weight: var(--font-weight-semibold);
    margin: 0;
}

.nav-btn {
    background: var(--bg-secondary);
    border: 2px solid var(--bg-tertiary);
    color: var(--text-secondary);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-normal);
    cursor: pointer;
    box-shadow: var(--shadow-sm);
}

.nav-btn:hover {
    background: var(--accent-primary);
    color: var(--text-on-primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.calendar-grid {
    width: 100%;
}

.calendar-header-row {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 1px;
    margin-bottom: 1rem;
}

.day-header {
    text-align: center;
    padding: 1rem;
    color: var(--text-secondary);
    font-weight: var(--font-weight-semibold);
    background: var(--bg-secondary);
    border-radius: var(--border-radius-sm);
}

.calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 1px;
}

.calendar-day {
    aspect-ratio: 1;
    background: var(--bg-secondary);
    border: 2px solid var(--bg-tertiary);
    border-radius: var(--border-radius-md);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-normal);
    cursor: pointer;
    position: relative;
    min-height: 80px;
    box-shadow: var(--shadow-sm);
}

.calendar-day:hover {
    background: var(--bg-hover);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.calendar-day.empty {
    background: transparent;
    border: none;
    cursor: default;
    box-shadow: none;
}

.calendar-day.empty:hover {
    transform: none;
    box-shadow: none;
}

.calendar-day.today {
    border-color: var(--accent-primary);
    background: rgba(123, 97, 255, 0.1);
}

.calendar-day.has-entry {
    border-color: var(--accent-primary);
}

/* Updated mood colors for 10-point scale */
.calendar-day.mood-1 { background: rgba(220, 38, 38, 0.15); }   /* Terrible - Dark Red */
.calendar-day.mood-2 { background: rgba(239, 68, 68, 0.15); }   /* Very Bad - Red */
.calendar-day.mood-3 { background: rgba(249, 115, 22, 0.15); }  /* Bad - Orange */
.calendar-day.mood-4 { background: rgba(245, 158, 11, 0.15); }  /* Poor - Amber */
.calendar-day.mood-5 { background: rgba(234, 179, 8, 0.15); }   /* Okay - Yellow */
.calendar-day.mood-6 { background: rgba(132, 204, 22, 0.15); }  /* Fine - Lime */
.calendar-day.mood-7 { background: rgba(34, 197, 94, 0.15); }   /* Good - Green */
.calendar-day.mood-8 { background: rgba(16, 185, 129, 0.15); }  /* Great - Emerald */
.calendar-day.mood-9 { background: rgba(5, 150, 105, 0.15); }   /* Excellent - Teal */
.calendar-day.mood-10 { background: rgba(4, 120, 87, 0.15); }   /* Amazing - Dark Green */

.day-number {
    color: var(--text-primary);
    font-weight: var(--font-weight-medium);
    font-size: 1rem;
}

.day-mood {
    font-size: 1.5rem;
    margin-top: 0.25rem;
}

/* List View */
.list-view {
    background: var(--glass-bg);
    border-radius: var(--border-radius-lg);
    border: 2px solid var(--glass-border);
    padding: 2rem;
    box-shadow: var(--shadow-md);
}

.entries-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.entry-item {
    background: var(--bg-secondary);
    border: 2px solid var(--bg-tertiary);
    border-radius: var(--border-radius-lg);
    padding: 1.5rem;
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
}

.entry-item:hover {
    background: var(--bg-hover);
    border-color: var(--primary);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.entry-date {
    display: flex;
    align-items: center;
    gap: 1rem;
    min-width: 120px;
}

.date-day {
    font-size: 2rem;
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    line-height: 1;
}

.date-info {
    display: flex;
    flex-direction: column;
}

.date-month {
    color: var(--text-secondary);
    font-weight: var(--font-weight-medium);
    font-size: 0.9rem;
}

.date-year {
    color: var(--text-tertiary);
    font-size: 0.8rem;
}

.entry-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.entry-mood {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.mood-emoji {
    font-size: 2rem;
}

.mood-text {
    color: var(--text-primary);
    font-weight: var(--font-weight-semibold);
    font-size: 1.1rem;
}

.mood-level {
    background: var(--accent-primary);
    color: var(--text-on-primary);
    padding: 0.25rem 0.75rem;
    border-radius: var(--border-radius-md);
    font-size: 0.8rem;
    font-weight: var(--font-weight-semibold);
}

.entry-notes {
    color: var(--text-secondary);
    line-height: 1.6;
    font-style: italic;
}

.entry-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.tag {
    background: var(--bg-tertiary);
    color: var(--text-secondary);
    padding: 0.25rem 0.75rem;
    border-radius: var(--border-radius-md);
    font-size: 0.8rem;
    font-weight: var(--font-weight-medium);
    border: 1px solid var(--bg-hover);
}

.entry-meta {
    color: var(--text-tertiary);
    font-size: 0.8rem;
}

.entry-actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.action-btn {
    background: var(--bg-secondary);
    border: 2px solid var(--bg-tertiary);
    color: var(--text-secondary);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-normal);
    cursor: pointer;
    text-decoration: none;
    box-shadow: var(--shadow-sm);
}

.action-btn:hover {
    background: var(--accent-primary);
    color: var(--text-on-primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
    text-decoration: none;
}

.delete-btn:hover {
    background: #ef4444;
    color: white;
}

.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-secondary);
}

.empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
}

.empty-state h3 {
    color: var(--text-primary);
    margin-bottom: 1rem;
}

.empty-state p {
    margin-bottom: 2rem;
    font-size: 1.1rem;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .centered-content {
        padding: 1rem;
    }

    .history-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }

    .filters-section {
        flex-direction: column;
        gap: 1rem;
    }

    .filter-group {
        width: 100%;
    }

    .filter-select,
    .filter-input {
        min-width: auto;
        width: 100%;
    }

    .entry-item {
        flex-direction: column;
        gap: 1rem;
    }

    .entry-date {
        min-width: auto;
        justify-content: center;
    }

    .entry-actions {
        flex-direction: row;
        justify-content: center;
    }

    .calendar-day {
        min-height: 60px;
    }

    .day-mood {
        font-size: 1.2rem;
    }
}
</style>

@section Scripts {
    <script>
        let currentDate = new Date();
        let entries = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(e => new {
            id = e.Id,
            date = e.EntryDate.ToString("yyyy-MM-dd"),
            moodLevel = e.MoodLevel,
            notes = e.Notes,
            tags = e.TagNames
        })));

        // Debug: Log entries data for calendar
        console.log('History Calendar Debug: Total entries loaded:', entries.length);
        console.log('History Calendar Debug: Sample entries:', entries.slice(0, 5));

        // Debug: Check mood level distribution
        const moodDistribution = {};
        entries.forEach(entry => {
            moodDistribution[entry.moodLevel] = (moodDistribution[entry.moodLevel] || 0) + 1;
        });
        console.log('History Calendar Debug: Mood level distribution:', moodDistribution);

        // View toggle
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const view = this.dataset.view;
                
                // Update active button
                document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                // Show/hide views
                if (view === 'calendar') {
                    document.getElementById('calendarView').style.display = 'block';
                    document.getElementById('listView').style.display = 'none';
                    generateCalendar();
                } else {
                    document.getElementById('calendarView').style.display = 'none';
                    document.getElementById('listView').style.display = 'block';
                }
            });
        });
        
        // Calendar generation
        function generateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            // Update header
            document.getElementById('currentMonth').textContent = 
                new Date(year, month).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            
            // Generate calendar days
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            const calendarDays = document.getElementById('calendarDays');
            
            calendarDays.innerHTML = '';
            
            // Empty cells for days before month starts
            for (let i = 0; i < firstDay; i++) {
                calendarDays.appendChild(createEmptyDay());
            }
            
            // Days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = createCalendarDay(year, month, day);
                calendarDays.appendChild(dayElement);
            }
        }
        
        function createEmptyDay() {
            const div = document.createElement('div');
            div.className = 'calendar-day empty';
            return div;
        }
        
        function createCalendarDay(year, month, day) {
            const date = new Date(year, month, day);
            const dateString = date.toISOString().split('T')[0];
            const entry = entries.find(e => e.date === dateString);

            const div = document.createElement('div');
            div.className = 'calendar-day';

            if (entry) {
                const emoji = getMoodEmoji(entry.moodLevel);
                console.log(`Calendar Debug: Date ${dateString}, Mood Level ${entry.moodLevel}, Emoji: ${emoji}`);

                div.classList.add('has-entry', `mood-${entry.moodLevel}`);
                div.innerHTML = `
                    <div class="day-number">${day}</div>
                    <div class="day-mood">${emoji}</div>
                `;
                div.onclick = () => viewEntry(entry.id);
            } else {
                div.innerHTML = `<div class="day-number">${day}</div>`;
            }

            // Highlight today
            const today = new Date();
            if (year === today.getFullYear() && month === today.getMonth() && day === today.getDate()) {
                div.classList.add('today');
            }

            return div;
        }
        
        function getMoodEmoji(moodLevel) {
            // Updated to support 10-point scale with consistent emoji mapping
            const emojis = {
                1: 'üò≠',   // Terrible
                2: 'üò¢',   // Very Bad
                3: 'üòî',   // Bad
                4: 'üòï',   // Poor
                5: 'üòê',   // Okay
                6: 'üôÇ',   // Fine
                7: 'üòä',   // Good
                8: 'üòÑ',   // Great
                9: 'üòÅ',   // Excellent
                10: 'ü§©'   // Amazing
            };
            return emojis[moodLevel] || 'üòê';
        }
        
        function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            generateCalendar();
        }
        
        // Filtering
        function applyFilters() {
            const dateRange = document.getElementById('dateRange').value;
            const moodFilter = document.getElementById('moodFilter').value;
            const searchText = document.getElementById('searchNotes').value.toLowerCase();
            
            document.querySelectorAll('.entry-item').forEach(item => {
                let show = true;
                
                // Date filter
                if (dateRange !== 'all') {
                    const entryDate = new Date(item.dataset.date);
                    const cutoffDate = new Date();
                    cutoffDate.setDate(cutoffDate.getDate() - parseInt(dateRange));
                    if (entryDate < cutoffDate) show = false;
                }
                
                // Mood filter
                if (moodFilter && item.dataset.mood !== moodFilter) {
                    show = false;
                }
                
                // Search filter
                if (searchText && !item.dataset.notes.includes(searchText)) {
                    show = false;
                }
                
                item.style.display = show ? 'flex' : 'none';
            });
        }
        
        function clearFilters() {
            document.getElementById('dateRange').value = '30';
            document.getElementById('moodFilter').value = '';
            document.getElementById('searchNotes').value = '';
            applyFilters();
        }
        
        // Event listeners for filters
        document.getElementById('dateRange').addEventListener('change', applyFilters);
        document.getElementById('moodFilter').addEventListener('change', applyFilters);
        document.getElementById('searchNotes').addEventListener('input', applyFilters);
        
        // Entry actions
        function viewEntry(id) {
            // Implementation for viewing entry details
            console.log('View entry:', id);
        }
        
        function deleteEntry(id) {
            showConfirmDialog(
                'Delete Mood Entry',
                'Are you sure you want to delete this mood entry? This action cannot be undone.',
                'Delete',
                'Cancel',
                function() {
                    // Show loading
                    showLoadingOverlay('Deleting entry...');

                    // Simulate API call (replace with actual implementation)
                    setTimeout(() => {
                        hideLoadingOverlay();
                        showMessage('Mood entry deleted successfully', '#10b981', 2000);
                        // Remove entry from UI
                        const entryElement = document.querySelector(`[data-entry-id="${id}"]`);
                        if (entryElement) {
                            entryElement.style.animation = 'fadeOut 0.3s ease';
                            setTimeout(() => entryElement.remove(), 300);
                        }
                    }, 1000);
                }
            );
        }

        function showConfirmDialog(title, message, confirmText, cancelText, onConfirm) {
            const dialog = document.createElement('div');
            dialog.className = 'modal fade';
            dialog.innerHTML = `
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content" style="background: var(--glass-bg); border: 2px solid var(--glass-border); backdrop-filter: blur(20px);">
                        <div class="modal-header" style="border-bottom: 2px solid var(--glass-border);">
                            <h5 class="modal-title" style="color: var(--text-primary); font-weight: 600;">${title}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body" style="color: var(--text-secondary); line-height: 1.6;">
                            ${message}
                        </div>
                        <div class="modal-footer" style="border-top: 2px solid var(--glass-border);">
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">${cancelText}</button>
                            <button type="button" class="btn btn-danger confirm-btn">${confirmText}</button>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(dialog);
            const modal = new bootstrap.Modal(dialog);

            dialog.querySelector('.confirm-btn').addEventListener('click', function() {
                modal.hide();
                if (onConfirm) onConfirm();
            });

            dialog.addEventListener('hidden.bs.modal', function() {
                dialog.remove();
            });

            modal.show();
        }
        
        // Initialize
        generateCalendar();
    </script>
}
