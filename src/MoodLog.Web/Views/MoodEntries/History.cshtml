@model List<MoodLog.Core.DTOs.MoodEntryDto>
@{
    ViewData["Title"] = "Mood History";
    Layout = "_DashboardLayout";
}

<div class="history-content">
    <!-- Header with View Toggle -->
    <div class="history-header">
        <h2>Mood History</h2>
        <div class="view-controls">
            <div class="view-toggle">
                <button class="view-btn active" data-view="calendar">
                    <i class="fas fa-calendar-alt"></i>
                    Calendar
                </button>
                <button class="view-btn" data-view="list">
                    <i class="fas fa-list"></i>
                    List
                </button>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="filters-section">
        <div class="filter-group">
            <label for="dateRange" class="filter-label">Date Range:</label>
            <select id="dateRange" class="filter-select">
                <option value="7">Last 7 days</option>
                <option value="30" selected>Last 30 days</option>
                <option value="90">Last 3 months</option>
                <option value="365">Last year</option>
                <option value="all">All time</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label for="moodFilter" class="filter-label">Mood:</label>
            <select id="moodFilter" class="filter-select">
                <option value="">All moods</option>
                <option value="1">üò¢ Very Bad</option>
                <option value="2">üòî Bad</option>
                <option value="3">üòê Okay</option>
                <option value="4">üòä Good</option>
                <option value="5">üòÑ Great</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label for="searchNotes" class="filter-label">Search:</label>
            <input type="text" id="searchNotes" class="filter-input" placeholder="Search notes...">
        </div>
        
        <button class="filter-clear" onclick="clearFilters()">
            <i class="fas fa-times"></i>
            Clear
        </button>
    </div>

    <!-- Calendar View -->
    <div class="calendar-view" id="calendarView">
        <div class="calendar-header">
            <button class="nav-btn" onclick="changeMonth(-1)">
                <i class="fas fa-chevron-left"></i>
            </button>
            <h3 id="currentMonth">December 2024</h3>
            <button class="nav-btn" onclick="changeMonth(1)">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
        
        <div class="calendar-grid">
            <div class="calendar-header-row">
                <div class="day-header">Sun</div>
                <div class="day-header">Mon</div>
                <div class="day-header">Tue</div>
                <div class="day-header">Wed</div>
                <div class="day-header">Thu</div>
                <div class="day-header">Fri</div>
                <div class="day-header">Sat</div>
            </div>
            <div class="calendar-days" id="calendarDays">
                <!-- Calendar days will be generated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- List View -->
    <div class="list-view" id="listView" style="display: none;">
        <div class="entries-list" id="entriesList">
            @if (Model.Any())
            {
                @foreach (var entry in Model.OrderByDescending(e => e.EntryDate))
                {
                    <div class="entry-item" data-mood="@entry.MoodLevel" data-date="@entry.EntryDate.ToString("yyyy-MM-dd")" data-notes="@entry.Notes.ToLower()">
                        <div class="entry-date">
                            <div class="date-day">@entry.EntryDate.ToString("dd")</div>
                            <div class="date-info">
                                <div class="date-month">@entry.EntryDate.ToString("MMM")</div>
                                <div class="date-year">@entry.EntryDate.ToString("yyyy")</div>
                            </div>
                        </div>
                        
                        <div class="entry-content">
                            <div class="entry-mood">
                                <span class="mood-emoji">@GetMoodEmoji(entry.MoodLevel)</span>
                                <span class="mood-text">@GetMoodText(entry.MoodLevel)</span>
                                <span class="mood-level">@entry.MoodLevel/5</span>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(entry.Notes))
                            {
                                <div class="entry-notes">@entry.Notes</div>
                            }
                            
                            @if (entry.TagNames.Any())
                            {
                                <div class="entry-tags">
                                    @foreach (var tag in entry.TagNames)
                                    {
                                        <span class="tag">@tag</span>
                                    }
                                </div>
                            }
                            
                            <div class="entry-meta">
                                <span class="entry-time">@entry.EntryDate.ToString("dddd, MMMM dd, yyyy")</span>
                            </div>
                        </div>
                        
                        <div class="entry-actions">
                            <button class="action-btn" onclick="viewEntry(@entry.Id)" title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            <a href="@Url.Action("Edit", "MoodEntries", new { id = entry.Id })" class="action-btn" title="Edit">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="action-btn delete-btn" onclick="deleteEntry(@entry.Id)" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-icon">üìù</div>
                    <h3>No mood entries found</h3>
                    <p>Start tracking your mood to see your history here.</p>
                    <a href="@Url.Action("Create", "MoodEntries")" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Add Your First Entry
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Entry Detail Modal -->
<div class="modal fade" id="entryModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Mood Entry Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="entryModalBody">
                <!-- Entry details will be loaded here -->
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetMoodEmoji(int moodLevel)
    {
        return moodLevel switch
        {
            1 => "üò¢",
            2 => "üòî",
            3 => "üòê",
            4 => "üòä",
            5 => "üòÑ",
            _ => "üòê"
        };
    }
    
    private string GetMoodText(int moodLevel)
    {
        return moodLevel switch
        {
            1 => "Very Bad",
            2 => "Bad",
            3 => "Okay",
            4 => "Good",
            5 => "Great",
            _ => "Unknown"
        };
    }
}

@section Scripts {
    <script>
        let currentDate = new Date();
        let entries = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(e => new { 
            id = e.Id,
            date = e.EntryDate.ToString("yyyy-MM-dd"),
            moodLevel = e.MoodLevel,
            notes = e.Notes,
            tags = e.TagNames
        })));
        
        // View toggle
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const view = this.dataset.view;
                
                // Update active button
                document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                // Show/hide views
                if (view === 'calendar') {
                    document.getElementById('calendarView').style.display = 'block';
                    document.getElementById('listView').style.display = 'none';
                    generateCalendar();
                } else {
                    document.getElementById('calendarView').style.display = 'none';
                    document.getElementById('listView').style.display = 'block';
                }
            });
        });
        
        // Calendar generation
        function generateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            // Update header
            document.getElementById('currentMonth').textContent = 
                new Date(year, month).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            
            // Generate calendar days
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            const calendarDays = document.getElementById('calendarDays');
            
            calendarDays.innerHTML = '';
            
            // Empty cells for days before month starts
            for (let i = 0; i < firstDay; i++) {
                calendarDays.appendChild(createEmptyDay());
            }
            
            // Days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = createCalendarDay(year, month, day);
                calendarDays.appendChild(dayElement);
            }
        }
        
        function createEmptyDay() {
            const div = document.createElement('div');
            div.className = 'calendar-day empty';
            return div;
        }
        
        function createCalendarDay(year, month, day) {
            const date = new Date(year, month, day);
            const dateString = date.toISOString().split('T')[0];
            const entry = entries.find(e => e.date === dateString);
            
            const div = document.createElement('div');
            div.className = 'calendar-day';
            
            if (entry) {
                div.classList.add('has-entry', `mood-${entry.moodLevel}`);
                div.innerHTML = `
                    <div class="day-number">${day}</div>
                    <div class="day-mood">${getMoodEmoji(entry.moodLevel)}</div>
                `;
                div.onclick = () => viewEntry(entry.id);
            } else {
                div.innerHTML = `<div class="day-number">${day}</div>`;
            }
            
            // Highlight today
            const today = new Date();
            if (year === today.getFullYear() && month === today.getMonth() && day === today.getDate()) {
                div.classList.add('today');
            }
            
            return div;
        }
        
        function getMoodEmoji(moodLevel) {
            const emojis = { 1: 'üò¢', 2: 'üòî', 3: 'üòê', 4: 'üòä', 5: 'üòÑ' };
            return emojis[moodLevel] || 'üòê';
        }
        
        function changeMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            generateCalendar();
        }
        
        // Filtering
        function applyFilters() {
            const dateRange = document.getElementById('dateRange').value;
            const moodFilter = document.getElementById('moodFilter').value;
            const searchText = document.getElementById('searchNotes').value.toLowerCase();
            
            document.querySelectorAll('.entry-item').forEach(item => {
                let show = true;
                
                // Date filter
                if (dateRange !== 'all') {
                    const entryDate = new Date(item.dataset.date);
                    const cutoffDate = new Date();
                    cutoffDate.setDate(cutoffDate.getDate() - parseInt(dateRange));
                    if (entryDate < cutoffDate) show = false;
                }
                
                // Mood filter
                if (moodFilter && item.dataset.mood !== moodFilter) {
                    show = false;
                }
                
                // Search filter
                if (searchText && !item.dataset.notes.includes(searchText)) {
                    show = false;
                }
                
                item.style.display = show ? 'flex' : 'none';
            });
        }
        
        function clearFilters() {
            document.getElementById('dateRange').value = '30';
            document.getElementById('moodFilter').value = '';
            document.getElementById('searchNotes').value = '';
            applyFilters();
        }
        
        // Event listeners for filters
        document.getElementById('dateRange').addEventListener('change', applyFilters);
        document.getElementById('moodFilter').addEventListener('change', applyFilters);
        document.getElementById('searchNotes').addEventListener('input', applyFilters);
        
        // Entry actions
        function viewEntry(id) {
            // Implementation for viewing entry details
            console.log('View entry:', id);
        }
        
        function deleteEntry(id) {
            if (confirm('Are you sure you want to delete this mood entry?')) {
                // Implementation for deleting entry
                console.log('Delete entry:', id);
            }
        }
        
        // Initialize
        generateCalendar();
    </script>
}
