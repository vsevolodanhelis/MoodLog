@{
    ViewData["Title"] = "Data Seeding";
    Layout = "_DashboardLayout";
}

<div class="seeding-content">
    <div class="seeding-card">
        <div class="seeding-header">
            <h2><i class="fas fa-database me-2"></i>Mock Data Generation</h2>
            <p class="text-muted">Generate realistic mood entries to demonstrate the application's features</p>
        </div>

        <div class="seeding-body">
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Demo Data:</strong> This will create 45 realistic mood entries spanning the last 3 months with varied moods, notes, and tags to showcase all application features.
            </div>

            <div class="seeding-options">
                <div class="form-group">
                    <label for="entryCount" class="form-label">Number of entries to generate:</label>
                    <select id="entryCount" class="form-control">
                        <option value="30">30 entries (1 month)</option>
                        <option value="45" selected>45 entries (3 months)</option>
                        <option value="60">60 entries (3+ months)</option>
                    </select>
                </div>

                <div class="seeding-features">
                    <h4>Generated data will include:</h4>
                    <ul class="feature-list">
                        <li><i class="fas fa-chart-line text-primary"></i> Realistic mood trends over time</li>
                        <li><i class="fas fa-tags text-success"></i> Diverse mood tags and combinations</li>
                        <li><i class="fas fa-calendar text-info"></i> Weekly patterns (weekends vs weekdays)</li>
                        <li><i class="fas fa-sticky-note text-warning"></i> Varied notes reflecting real-life scenarios</li>
                        <li><i class="fas fa-brain text-purple"></i> Emotional progression and patterns</li>
                        <li><i class="fas fa-chart-pie text-danger"></i> Balanced mood distribution for analytics</li>
                    </ul>
                </div>

                <div class="seeding-actions">
                    <button type="button" class="btn btn-primary btn-lg" onclick="seedMoodData()">
                        <i class="fas fa-magic me-2"></i>Generate Mock Data
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="goToDashboard()">
                        <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .seeding-content {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
    }

    .seeding-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .seeding-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .seeding-header h2 {
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }

    .seeding-options {
        margin-top: 1.5rem;
    }

    .feature-list {
        list-style: none;
        padding: 0;
        margin: 1rem 0;
    }

    .feature-list li {
        padding: 0.5rem 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .feature-list i {
        width: 20px;
        text-align: center;
    }

    .seeding-actions {
        margin-top: 2rem;
        text-align: center;
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .btn-lg {
        padding: 0.75rem 2rem;
        font-size: 1.1rem;
    }

    .text-purple {
        color: #8b5cf6 !important;
    }

    @@media (max-width: 768px) {
        .seeding-content {
            padding: 1rem;
        }

        .seeding-card {
            padding: 1.5rem;
        }

        .seeding-actions {
            flex-direction: column;
        }
    }
</style>

<script>
    function seedMoodData() {
        const entryCount = document.getElementById('entryCount').value;
        const button = document.querySelector('button[onclick="seedMoodData()"]');
        
        // Show loading state
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating Data...';
        
        fetch('@Url.Action("SeedMoodData", "Seed")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: new URLSearchParams({
                entryCount: entryCount
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showMessage(data.message, 'success');
                
                // Redirect to dashboard after a delay
                setTimeout(() => {
                    window.location.href = '@Url.Action("Index", "Dashboard")';
                }, 2000);
            } else {
                showMessage(data.message, 'error');
                
                // Reset button
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-magic me-2"></i>Generate Mock Data';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showMessage('Failed to generate mock data. Please try again.', 'error');
            
            // Reset button
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-magic me-2"></i>Generate Mock Data';
        });
    }

    function goToDashboard() {
        window.location.href = '@Url.Action("Index", "Dashboard")';
    }

    function showMessage(text, type) {
        const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
        
        const message = document.createElement('div');
        message.className = `alert ${alertClass} alert-dismissible fade show`;
        message.innerHTML = `
            <i class="fas ${iconClass} me-2"></i>
            ${text}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        const container = document.querySelector('.seeding-body');
        container.insertBefore(message, container.firstChild);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            if (message.parentNode) {
                message.remove();
            }
        }, 5000);
    }
</script>
